//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MainMenu"",
            ""id"": ""5c49581b-841c-4b58-a39e-e68dc722d253"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""e041461a-317b-48bc-8e2a-6fcb883aec3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""dbe68928-86f3-45a3-9aba-efd4ac105b0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c970a392-0753-46ae-9198-d3586b78d8b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf0e3c49-bf3e-4bdb-a44d-5843be555869"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99e37826-1d6b-4b44-8729-18ef5addad97"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""912ca069-44f0-42ab-82c0-b9404ae9c381"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c402f0af-6d25-458d-95a8-ddc4b455c10a"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05da6f5e-1878-4a7d-8e39-45b913c0c767"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""93da588d-7429-47f5-8c17-4660bc79c2dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2773ae3c-fd60-4d8f-8fc6-7725682ff0b0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""16c053bb-5b67-45dd-af74-913aa1418adf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""585a721a-f865-4c4b-83cc-b1e3b5f78bc5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""476a422f-b92b-44ae-82ba-54cc243037dc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""c52403e1-ae69-4ec2-bd26-39f08860b36a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2a90d6fd-7ce7-4475-9eb9-d11598efdb1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RedPaddleDown"",
                    ""type"": ""Button"",
                    ""id"": ""889f4add-0dec-41be-8877-5d876b1be66f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RedPaddleUp"",
                    ""type"": ""Button"",
                    ""id"": ""b1c996e0-70e3-469a-984c-2ad47ba8a2b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BluePaddeDown"",
                    ""type"": ""Button"",
                    ""id"": ""ac53bc03-c11f-4fbb-a941-37b69530c8e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BluePaddeUp"",
                    ""type"": ""Button"",
                    ""id"": ""08cbe9fd-3cf0-48db-b8fe-4e754757f667"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fa9d5d8c-6600-423d-a5a3-9b4ba8163558"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e7b7e4e-96e6-449f-a84c-a093e62446dc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b45def44-3529-45da-98d7-613f5ab88b5c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1c5e8f9e-b748-418e-96fb-e853effdcf0a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19bbfc99-7fdf-4c3b-bdf3-a09373e78b2a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5b00c00f-5c23-47bb-891e-826d9d589ee8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ba833d1-764e-4d5d-86bf-f07c037be9b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""69082343-9536-487c-a88a-44f97bb8315e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedPaddleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8359bdf8-cb61-4c80-b61a-439d63db1751"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedPaddleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22246b48-9f81-4880-a232-80ec95c8fb37"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e15f927a-d14a-4b1e-8ef9-f08d494d2e07"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""839ee288-1825-48e3-82fe-2b9ef913a8aa"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedPaddleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6c27040-59e2-41e1-a025-d3581446543a"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedPaddleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51984bc6-9eb9-44d1-b8da-ddc1127a8ff4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BluePaddeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dcefd9c-a9e2-491b-b761-7826b486b33c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BluePaddeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b33dcec0-3fc0-4ba1-832c-c8b7792b4756"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BluePaddeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fac53a9-8db4-4653-b374-33346d963671"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BluePaddeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""ad87b10c-756f-487f-bdf2-f04e66ed8139"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c12260df-e345-4777-8b48-baeab58832ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UnPause"",
                    ""type"": ""Button"",
                    ""id"": ""6581499b-732a-4e75-a482-604836f0eda6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""0810350b-9814-4266-9ba6-d948c3a21da2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4783a6f8-5a3d-49ed-b247-264b4aade54c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bc37a3d-0262-4a0f-a694-b4a89050fba6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05ead994-96db-4581-b5df-8d2a6c1ba7e6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e9a73dc9-7828-44d2-8d4e-32c97760f411"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fd08f79-c44b-410d-a183-33bbb2617d09"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f5534d7-2bce-447b-95d3-5be9fa3634f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""393c7c4a-959c-40ce-b951-f7027b87c75b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1ce21dd6-98c8-41c1-8352-b579f58c5477"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""75ea90aa-6f92-4a6d-9d31-b28d4d75748e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e520b33-b2c9-43e7-b339-82526cb94494"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Settings"",
            ""id"": ""b32c3d85-db9f-4847-a6b6-a51abb963bab"",
            ""actions"": [
                {
                    ""name"": ""MusicUp"",
                    ""type"": ""Button"",
                    ""id"": ""0c6902c5-9fa9-4d7c-810c-0d5c8b9291b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicDown"",
                    ""type"": ""Button"",
                    ""id"": ""5ae0bec9-640e-4310-ba45-23645ec76916"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SfxUp"",
                    ""type"": ""Button"",
                    ""id"": ""ff38346e-7da6-4c10-80e3-676d1a99b1ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SfxDown"",
                    ""type"": ""Button"",
                    ""id"": ""76359fd5-7dbf-438a-85db-b97dc23040a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitSettings"",
                    ""type"": ""Button"",
                    ""id"": ""243ce3f0-68fa-4764-b7b9-9c1549135963"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fcf1f407-e5cf-4b8d-92b8-987c30884455"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae7b7ed2-0311-4f29-8922-7214d5e676ad"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""576d0a5b-6d43-4e9f-a4eb-f5ccc385fa1e"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SfxUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b4bcf69-c805-4dbb-b4f2-207aa2030079"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SfxDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1754478e-adf5-4c60-ba92-fac92fc7f191"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitSettings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_Select = m_MainMenu.FindAction("Select", throwIfNotFound: true);
        m_MainMenu_Escape = m_MainMenu.FindAction("Escape", throwIfNotFound: true);
        m_MainMenu_Move = m_MainMenu.FindAction("Move", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Move = m_Game.FindAction("Move", throwIfNotFound: true);
        m_Game_RedPaddleDown = m_Game.FindAction("RedPaddleDown", throwIfNotFound: true);
        m_Game_RedPaddleUp = m_Game.FindAction("RedPaddleUp", throwIfNotFound: true);
        m_Game_BluePaddeDown = m_Game.FindAction("BluePaddeDown", throwIfNotFound: true);
        m_Game_BluePaddeUp = m_Game.FindAction("BluePaddeUp", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Move = m_PauseMenu.FindAction("Move", throwIfNotFound: true);
        m_PauseMenu_UnPause = m_PauseMenu.FindAction("UnPause", throwIfNotFound: true);
        m_PauseMenu_Confirm = m_PauseMenu.FindAction("Confirm", throwIfNotFound: true);
        // Settings
        m_Settings = asset.FindActionMap("Settings", throwIfNotFound: true);
        m_Settings_MusicUp = m_Settings.FindAction("MusicUp", throwIfNotFound: true);
        m_Settings_MusicDown = m_Settings.FindAction("MusicDown", throwIfNotFound: true);
        m_Settings_SfxUp = m_Settings.FindAction("SfxUp", throwIfNotFound: true);
        m_Settings_SfxDown = m_Settings.FindAction("SfxDown", throwIfNotFound: true);
        m_Settings_ExitSettings = m_Settings.FindAction("ExitSettings", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_Select;
    private readonly InputAction m_MainMenu_Escape;
    private readonly InputAction m_MainMenu_Move;
    public struct MainMenuActions
    {
        private @InputActions m_Wrapper;
        public MainMenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_MainMenu_Select;
        public InputAction @Escape => m_Wrapper.m_MainMenu_Escape;
        public InputAction @Move => m_Wrapper.m_MainMenu_Move;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Move;
    private readonly InputAction m_Game_RedPaddleDown;
    private readonly InputAction m_Game_RedPaddleUp;
    private readonly InputAction m_Game_BluePaddeDown;
    private readonly InputAction m_Game_BluePaddeUp;
    private readonly InputAction m_Game_Pause;
    public struct GameActions
    {
        private @InputActions m_Wrapper;
        public GameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Game_Move;
        public InputAction @RedPaddleDown => m_Wrapper.m_Game_RedPaddleDown;
        public InputAction @RedPaddleUp => m_Wrapper.m_Game_RedPaddleUp;
        public InputAction @BluePaddeDown => m_Wrapper.m_Game_BluePaddeDown;
        public InputAction @BluePaddeUp => m_Wrapper.m_Game_BluePaddeUp;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @RedPaddleDown.started += instance.OnRedPaddleDown;
            @RedPaddleDown.performed += instance.OnRedPaddleDown;
            @RedPaddleDown.canceled += instance.OnRedPaddleDown;
            @RedPaddleUp.started += instance.OnRedPaddleUp;
            @RedPaddleUp.performed += instance.OnRedPaddleUp;
            @RedPaddleUp.canceled += instance.OnRedPaddleUp;
            @BluePaddeDown.started += instance.OnBluePaddeDown;
            @BluePaddeDown.performed += instance.OnBluePaddeDown;
            @BluePaddeDown.canceled += instance.OnBluePaddeDown;
            @BluePaddeUp.started += instance.OnBluePaddeUp;
            @BluePaddeUp.performed += instance.OnBluePaddeUp;
            @BluePaddeUp.canceled += instance.OnBluePaddeUp;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @RedPaddleDown.started -= instance.OnRedPaddleDown;
            @RedPaddleDown.performed -= instance.OnRedPaddleDown;
            @RedPaddleDown.canceled -= instance.OnRedPaddleDown;
            @RedPaddleUp.started -= instance.OnRedPaddleUp;
            @RedPaddleUp.performed -= instance.OnRedPaddleUp;
            @RedPaddleUp.canceled -= instance.OnRedPaddleUp;
            @BluePaddeDown.started -= instance.OnBluePaddeDown;
            @BluePaddeDown.performed -= instance.OnBluePaddeDown;
            @BluePaddeDown.canceled -= instance.OnBluePaddeDown;
            @BluePaddeUp.started -= instance.OnBluePaddeUp;
            @BluePaddeUp.performed -= instance.OnBluePaddeUp;
            @BluePaddeUp.canceled -= instance.OnBluePaddeUp;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_Move;
    private readonly InputAction m_PauseMenu_UnPause;
    private readonly InputAction m_PauseMenu_Confirm;
    public struct PauseMenuActions
    {
        private @InputActions m_Wrapper;
        public PauseMenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PauseMenu_Move;
        public InputAction @UnPause => m_Wrapper.m_PauseMenu_UnPause;
        public InputAction @Confirm => m_Wrapper.m_PauseMenu_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @UnPause.started += instance.OnUnPause;
            @UnPause.performed += instance.OnUnPause;
            @UnPause.canceled += instance.OnUnPause;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @UnPause.started -= instance.OnUnPause;
            @UnPause.performed -= instance.OnUnPause;
            @UnPause.canceled -= instance.OnUnPause;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // Settings
    private readonly InputActionMap m_Settings;
    private List<ISettingsActions> m_SettingsActionsCallbackInterfaces = new List<ISettingsActions>();
    private readonly InputAction m_Settings_MusicUp;
    private readonly InputAction m_Settings_MusicDown;
    private readonly InputAction m_Settings_SfxUp;
    private readonly InputAction m_Settings_SfxDown;
    private readonly InputAction m_Settings_ExitSettings;
    public struct SettingsActions
    {
        private @InputActions m_Wrapper;
        public SettingsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MusicUp => m_Wrapper.m_Settings_MusicUp;
        public InputAction @MusicDown => m_Wrapper.m_Settings_MusicDown;
        public InputAction @SfxUp => m_Wrapper.m_Settings_SfxUp;
        public InputAction @SfxDown => m_Wrapper.m_Settings_SfxDown;
        public InputAction @ExitSettings => m_Wrapper.m_Settings_ExitSettings;
        public InputActionMap Get() { return m_Wrapper.m_Settings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingsActions set) { return set.Get(); }
        public void AddCallbacks(ISettingsActions instance)
        {
            if (instance == null || m_Wrapper.m_SettingsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettingsActionsCallbackInterfaces.Add(instance);
            @MusicUp.started += instance.OnMusicUp;
            @MusicUp.performed += instance.OnMusicUp;
            @MusicUp.canceled += instance.OnMusicUp;
            @MusicDown.started += instance.OnMusicDown;
            @MusicDown.performed += instance.OnMusicDown;
            @MusicDown.canceled += instance.OnMusicDown;
            @SfxUp.started += instance.OnSfxUp;
            @SfxUp.performed += instance.OnSfxUp;
            @SfxUp.canceled += instance.OnSfxUp;
            @SfxDown.started += instance.OnSfxDown;
            @SfxDown.performed += instance.OnSfxDown;
            @SfxDown.canceled += instance.OnSfxDown;
            @ExitSettings.started += instance.OnExitSettings;
            @ExitSettings.performed += instance.OnExitSettings;
            @ExitSettings.canceled += instance.OnExitSettings;
        }

        private void UnregisterCallbacks(ISettingsActions instance)
        {
            @MusicUp.started -= instance.OnMusicUp;
            @MusicUp.performed -= instance.OnMusicUp;
            @MusicUp.canceled -= instance.OnMusicUp;
            @MusicDown.started -= instance.OnMusicDown;
            @MusicDown.performed -= instance.OnMusicDown;
            @MusicDown.canceled -= instance.OnMusicDown;
            @SfxUp.started -= instance.OnSfxUp;
            @SfxUp.performed -= instance.OnSfxUp;
            @SfxUp.canceled -= instance.OnSfxUp;
            @SfxDown.started -= instance.OnSfxDown;
            @SfxDown.performed -= instance.OnSfxDown;
            @SfxDown.canceled -= instance.OnSfxDown;
            @ExitSettings.started -= instance.OnExitSettings;
            @ExitSettings.performed -= instance.OnExitSettings;
            @ExitSettings.canceled -= instance.OnExitSettings;
        }

        public void RemoveCallbacks(ISettingsActions instance)
        {
            if (m_Wrapper.m_SettingsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettingsActions instance)
        {
            foreach (var item in m_Wrapper.m_SettingsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettingsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettingsActions @Settings => new SettingsActions(this);
    public interface IMainMenuActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRedPaddleDown(InputAction.CallbackContext context);
        void OnRedPaddleUp(InputAction.CallbackContext context);
        void OnBluePaddeDown(InputAction.CallbackContext context);
        void OnBluePaddeUp(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnUnPause(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
    public interface ISettingsActions
    {
        void OnMusicUp(InputAction.CallbackContext context);
        void OnMusicDown(InputAction.CallbackContext context);
        void OnSfxUp(InputAction.CallbackContext context);
        void OnSfxDown(InputAction.CallbackContext context);
        void OnExitSettings(InputAction.CallbackContext context);
    }
}
